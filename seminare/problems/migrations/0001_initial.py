# Generated by Django 5.1.4 on 2025-09-23 08:10

import pathlib

import django.db.models.deletion
from django.db import migrations, models

import seminare.problems.models
import seminare.problems.storages


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contests", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="ProblemSet",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(max_length=64)),
                ("name", models.CharField(max_length=256)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField()),
                ("is_public", models.BooleanField(default=False)),
                ("rule_engine", models.CharField(max_length=512)),
                ("rule_engine_options", models.JSONField(blank=True, default=dict)),
                ("is_finalized", models.BooleanField(default=False)),
                (
                    "statement_pdf",
                    models.FileField(
                        blank=True,
                        null=True,
                        storage=seminare.problems.storages.OverwriteStorage(
                            base_url="/.private/",
                            location=pathlib.PurePosixPath("/app/private"),
                        ),
                        upload_to=seminare.problems.models.get_statement_filename,
                    ),
                ),
                (
                    "solution_pdf",
                    models.FileField(
                        blank=True,
                        null=True,
                        storage=seminare.problems.storages.OverwriteStorage(
                            base_url="/.private/",
                            location=pathlib.PurePosixPath("/app/private"),
                        ),
                        upload_to=seminare.problems.models.get_solution_filename,
                    ),
                ),
                (
                    "contest",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contests.contest",
                    ),
                ),
            ],
            options={
                "ordering": ["start_date", "end_date"],
            },
        ),
        migrations.CreateModel(
            name="Problem",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(blank=True, max_length=256)),
                ("number", models.IntegerField(default=0)),
                (
                    "file_points",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "judge_points",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                (
                    "text_points",
                    models.DecimalField(decimal_places=2, default=0, max_digits=5),
                ),
                ("judge_namespace", models.CharField(blank=True, max_length=256)),
                ("judge_task", models.CharField(blank=True, max_length=256)),
                ("text_answer", models.CharField(blank=True, max_length=256)),
                (
                    "problem_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="problems",
                        to="problems.problemset",
                    ),
                ),
            ],
            options={
                "ordering": ["problem_set", "number"],
            },
        ),
        migrations.CreateModel(
            name="ProblemSetFrozenResults",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("table", models.CharField(max_length=64)),
                ("data", models.JSONField(blank=True, default=dict)),
                (
                    "problem_set",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="frozen_results",
                        to="problems.problemset",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Text",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("text", models.TextField(blank=True)),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("PS", "Problem statement"),
                            ("ES", "Example solution"),
                            ("SSH", "Susi small hint"),
                            ("SLH", "Susi large hint"),
                        ],
                        max_length=3,
                    ),
                ),
                (
                    "problem",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="text_set",
                        to="problems.problem",
                    ),
                ),
            ],
            options={
                "ordering": ["problem", "type"],
            },
        ),
        migrations.AddConstraint(
            model_name="problemset",
            constraint=models.UniqueConstraint(
                models.F("contest"),
                models.F("slug"),
                name="problemset__contest_slug__unique",
            ),
        ),
        migrations.AddConstraint(
            model_name="problem",
            constraint=models.UniqueConstraint(
                models.F("problem_set"),
                models.F("number"),
                name="problem__problem_set_number__unique",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="problemsetfrozenresults",
            unique_together={("problem_set", "table")},
        ),
        migrations.AddConstraint(
            model_name="text",
            constraint=models.UniqueConstraint(
                models.F("problem"), models.F("type"), name="text__unique_problem_type"
            ),
        ),
    ]
